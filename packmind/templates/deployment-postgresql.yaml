{{- if .Values.postgresql.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "packmind.fullname" . }}-postgresql
  labels:
    {{- include "packmind.postgresql.labels" . | nindent 4 }}
  {{- with (include "packmind.annotations" .) }}
  annotations:
    {{- if . }}
    {{- . | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "packmind.postgresql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.postgresql.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with (include "packmind.annotations" .) }}
        {{- if . }}
        {{- . | nindent 8 }}
        {{- end }}
        {{- end }}
      labels:
        {{- include "packmind.postgresql.selectorLabels" . | nindent 8 }}
        {{- with .Values.postgresql.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- include "packmind.imagePullSecrets" . | nindent 6 }}
      {{- include "packmind.serviceAccountNameField" . | nindent 6 }}
      {{- include "packmind.podSecurityContextField" (dict "context" . "component" "postgresql") | nindent 6 }}
      containers:
        - name: postgresql
          {{- include "packmind.securityContextField" (dict "context" . "component" "postgresql") | nindent 10 }}
          image: "{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          imagePullPolicy: {{ .Values.postgresql.image.pullPolicy }}
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username | quote }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgresql.auth.password | quote }}
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.auth.database | quote }}
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.postgresql.auth.username | quote }} -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U {{ .Values.postgresql.auth.username | quote }} -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.postgresql.resources | nindent 12 }}
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
            {{- include "packmind.serviceVolumeMounts" (dict "component" "postgresql" "context" .) | nindent 12 }}
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: {{ include "packmind.fullname" . }}-postgresql-data
        {{- include "packmind.serviceVolumes" (dict "component" "postgresql" "context" .) | nindent 8 }}
      {{- with .Values.postgresql.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.postgresql.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.postgresql.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
